import customtkinter as ctk
from CTkMessagebox import CTkMessagebox
import json
import os

JSON_FILE = "recommendations.json"

def load_recommendations():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–∑ JSON-—Ñ–∞–π–ª–∞"""
    if not os.path.exists(JSON_FILE):
        with open(JSON_FILE, "w", encoding="utf-8") as f:
            json.dump({}, f, ensure_ascii=False, indent=4)
    with open(JSON_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

class RecommendationApp(ctk.CTk):
    def __init__(self, logic):
        super().__init__()
        self.logic = logic
        self.title("AI –í—Ä–∞—á - –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫")
        self.geometry("800x600")

        # **–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞**
        ctk.set_appearance_mode("light")
        ctk.set_default_color_theme("blue")

        # **–°–≤–µ—Ç–ª—ã–π —Ñ–æ–Ω**
        self.configure(bg="#F5F5F5")

        # –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
        self.tabview = ctk.CTkTabview(self)
        self.tabview.pack(fill="both", expand=True, padx=10, pady=10)

        self.create_main_tab()
        self.create_edit_tab()
        self.create_directory_tab()  # –í–∫–ª–∞–¥–∫–∞ "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"

    def refresh_disease_checkboxes(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π"""
        recommendations = load_recommendations()
        if hasattr(self, "disease_frame"):  # **–ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —ç—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç**
            for widget in self.disease_frame.winfo_children():
                widget.destroy()

            for disease in recommendations.keys():
                var = ctk.BooleanVar()
                chk = ctk.CTkCheckBox(self.disease_frame, text=disease, variable=var, font=("Inter", 14))
                chk.pack(anchor="w", padx=10, pady=2)
                self.disease_vars[disease] = var

    def refresh_disease_list(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –±–æ–ª–µ–∑–Ω–µ–π –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ"""
        recommendations = load_recommendations()
        self.disease_list.configure(values=list(recommendations.keys()))

    def confirm_delete_disease(self):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –±–æ–ª–µ–∑–Ω–∏"""
        disease = self.disease_list.get()
        if not disease:
            CTkMessagebox(title="–û—à–∏–±–∫–∞", message="–í—ã–±–µ—Ä–∏—Ç–µ –±–æ–ª–µ–∑–Ω—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!", icon="cancel")
            return

        result = CTkMessagebox(title="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", message=f"–£–¥–∞–ª–∏—Ç—å '{disease}'?", icon="warning",
                               option_1="–û—Ç–º–µ–Ω–∞", option_2="–£–¥–∞–ª–∏—Ç—å")
        if result.get() == "–£–¥–∞–ª–∏—Ç—å":
            self.delete_disease(disease)

    def delete_disease(self, disease):
        """–£–¥–∞–ª—è–µ—Ç –±–æ–ª–µ–∑–Ω—å –∏–∑ JSON"""
        recommendations = load_recommendations()
        if disease in recommendations:
            del recommendations[disease]

        with open(JSON_FILE, "w", encoding="utf-8") as f:
            json.dump(recommendations, f, ensure_ascii=False, indent=4)

        self.refresh_disease_list()
        self.recommendation_text.configure(state="normal")
        self.recommendation_text.delete("1.0", "end")
        self.recommendation_text.configure(state="disabled")

        CTkMessagebox(title="–ì–æ—Ç–æ–≤–æ", message=f"–ë–æ–ª–µ–∑–Ω—å '{disease}' —É–¥–∞–ª–µ–Ω–∞!", icon="check")

    def display_recommendation(self, disease):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –±–æ–ª–µ–∑–Ω–∏"""
        recommendations = load_recommendations()
        self.recommendation_text.configure(state="normal")
        self.recommendation_text.delete("1.0", "end")
        self.recommendation_text.insert("1.0", recommendations.get(disease, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"))
        self.recommendation_text.configure(state="disabled")  # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤–≤–æ–¥

    def create_main_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        tab_main = self.tabview.add("ü©∫ –°–æ–∑–¥–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")

        frame = ctk.CTkFrame(tab_main, corner_radius=20, fg_color="white")
        frame.pack(pady=20, padx=20, fill="both", expand=True)

        ctk.CTkLabel(frame, text="–ò–º—è –ø–∞—Ü–∏–µ–Ω—Ç–∞:", font=("Montserrat", 16, "bold"), text_color="black").pack(pady=5)
        self.entry_name = ctk.CTkEntry(frame, width=400, corner_radius=12, font=("Inter", 14))
        self.entry_name.pack(pady=5)

        ctk.CTkLabel(frame, text="–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è:", font=("Montserrat", 16, "bold"), text_color="black").pack(pady=5)

        self.disease_vars = {}
        self.disease_frame = ctk.CTkScrollableFrame(frame, width=400, height=200, corner_radius=12, fg_color="#F5F5F5")
        self.disease_frame.pack(pady=5, padx=10, fill="both", expand=True)

        self.refresh_disease_checkboxes()

        self.btn_generate = ctk.CTkButton(frame, text="üìÑ –°–æ–∑–¥–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", command=self.generate_recommendations, corner_radius=15, font=("Montserrat", 14))
        self.btn_generate.pack(pady=10)

    def create_edit_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –±–æ–ª–µ–∑–Ω–µ–π"""
        tab_edit = self.tabview.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")

        frame = ctk.CTkFrame(tab_edit, corner_radius=20, fg_color="white")
        frame.pack(pady=20, padx=20, fill="both", expand=True)

        ctk.CTkLabel(frame, text="–ù–∞–∑–≤–∞–Ω–∏–µ –±–æ–ª–µ–∑–Ω–∏:", font=("Montserrat", 16, "bold"), text_color="black").pack(pady=5)
        self.entry_disease = ctk.CTkEntry(frame, width=400, corner_radius=12, font=("Inter", 14))
        self.entry_disease.pack(pady=5)

        ctk.CTkLabel(frame, text="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:", font=("Montserrat", 16, "bold"), text_color="black").pack(pady=5)
        self.entry_recommendation = ctk.CTkTextbox(frame, width=400, height=100, corner_radius=12, font=("Inter", 14))
        self.entry_recommendation.pack(pady=5)

        self.btn_add = ctk.CTkButton(frame, text="‚úÖ –î–æ–±–∞–≤–∏—Ç—å", command=self.add_recommendation, corner_radius=15,
                                     font=("Montserrat", 14))
        self.btn_add.pack(pady=10)

    def add_recommendation(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –±–æ–ª–µ–∑–Ω—å –∏ –µ—ë —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –≤ JSON"""
        disease = self.entry_disease.get().strip()
        recommendation = self.entry_recommendation.get("1.0", "end").strip()
        if not disease or not recommendation:
            CTkMessagebox(title="–û—à–∏–±–∫–∞", message="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–æ–ª–µ–∑–Ω–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é!", icon="cancel")
            return

        self.logic.add_recommendation(disease, recommendation)
        self.refresh_disease_checkboxes()
        self.refresh_disease_list()

        CTkMessagebox(title="–ì–æ—Ç–æ–≤–æ", message=f'–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–ª—è "{disease}" –¥–æ–±–∞–≤–ª–µ–Ω–∞!', icon="check")

        self.entry_disease.delete(0, "end")
        self.entry_recommendation.delete("1.0", "end")

    def generate_recommendations(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        name = self.entry_name.get().strip()
        if not name:
            CTkMessagebox(title="–û—à–∏–±–∫–∞", message="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∞—Ü–∏–µ–Ω—Ç–∞!", icon="cancel")
            return

        selected_diseases = [d for d, var in self.disease_vars.items() if var.get()]
        if not selected_diseases:
            CTkMessagebox(title="–û—à–∏–±–∫–∞", message="–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ!", icon="warning")
            return

        file_path = self.logic.generate_recommendations(name, selected_diseases)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        CTkMessagebox(title="–ì–æ—Ç–æ–≤–æ", message=f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n{file_path}", icon="info")

    def enable_editing(self):
        """–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.recommendation_text.configure(state="normal")
        self.btn_save.configure(state="normal")  # –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"

    def save_edited_recommendation(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é"""
        disease = self.disease_list.get()
        if not disease:
            CTkMessagebox(title="–û—à–∏–±–∫–∞", message="–í—ã–±–µ—Ä–∏—Ç–µ –±–æ–ª–µ–∑–Ω—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!", icon="cancel")
            return

        new_text = self.recommendation_text.get("1.0", "end").strip()
        if not new_text:
            CTkMessagebox(title="–û—à–∏–±–∫–∞", message="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π!", icon="cancel")
            return

        recommendations = load_recommendations()
        recommendations[disease] = new_text

        with open(JSON_FILE, "w", encoding="utf-8") as f:
            json.dump(recommendations, f, ensure_ascii=False, indent=4)

        self.recommendation_text.configure(state="disabled")
        self.btn_save.configure(state="disabled")  # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"

        CTkMessagebox(title="–ì–æ—Ç–æ–≤–æ", message=f'–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–ª—è "{disease}" –æ–±–Ω–æ–≤–ª–µ–Ω–∞!', icon="check")

    def create_directory_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ '–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π'"""
        tab_directory = self.tabview.add("üìö –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")

        frame = ctk.CTkFrame(tab_directory, corner_radius=20, fg_color="white")
        frame.pack(pady=20, padx=20, fill="both", expand=True)

        ctk.CTkLabel(frame, text="–í—ã–±–µ—Ä–∏—Ç–µ –±–æ–ª–µ–∑–Ω—å:", font=("Montserrat", 16, "bold"), text_color="black").pack(pady=5)

        # –ö–æ–º–±–æ–±–æ–∫—Å, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è –≤–≤–æ–¥–∞
        self.disease_list = ctk.CTkComboBox(frame, width=400, values=[], command=self.display_recommendation,
                                            state="readonly")
        self.disease_list.pack(pady=5)

        self.recommendation_text = ctk.CTkTextbox(frame, width=400, height=100, corner_radius=12, font=("Inter", 14))
        self.recommendation_text.pack(pady=5)
        self.recommendation_text.configure(state="disabled")

        self.btn_edit = ctk.CTkButton(frame, text="‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", command=self.enable_editing, fg_color="blue",
                                      corner_radius=15, font=("Montserrat", 14))
        self.btn_edit.pack(pady=5)

        self.btn_save = ctk.CTkButton(frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=self.save_edited_recommendation,
                                      fg_color="green",
                                      corner_radius=15, font=("Montserrat", 14))
        self.btn_save.pack(pady=5)
        self.btn_save.configure(state="disabled")  # –ó–∞–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" –¥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

        self.btn_delete = ctk.CTkButton(frame, text="üóë –£–¥–∞–ª–∏—Ç—å –±–æ–ª–µ–∑–Ω—å", command=self.confirm_delete_disease,
                                        fg_color="red", corner_radius=15, font=("Montserrat", 14))
        self.btn_delete.pack(pady=10)

        self.refresh_disease_list()

