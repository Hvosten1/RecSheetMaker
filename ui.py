import customtkinter as ctk
from CTkMessagebox import CTkMessagebox
import json
import os
import datetime

JSON_FILE = "recommendations.json"
OUTPUT_FOLDER = "recommendations"


def load_recommendations():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–∑ JSON-—Ñ–∞–π–ª–∞"""
    if not os.path.exists(JSON_FILE):
        with open(JSON_FILE, "w", encoding="utf-8") as f:
            json.dump({}, f, ensure_ascii=False, indent=4)
    with open(JSON_FILE, "r", encoding="utf-8") as f:
        return json.load(f)


class RecommendationApp(ctk.CTk):
    def __init__(self, logic):
        super().__init__()
        self.logic = logic
        self.title("AI –í—Ä–∞—á - –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫")
        self.geometry("800x600")

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–º—É —Å–∏—Å—Ç–µ–º—ã
        ctk.set_appearance_mode("light")  # "light", "dark", "system"
        ctk.set_default_color_theme("green")  # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞

        # –§–æ–Ω —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
        self.configure(bg="#F5F5F5")  # –ì–ª—É–±–æ–∫–∏–π —Ç—ë–º–Ω—ã–π —Ñ–æ–Ω

        # –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
        self.tabview = ctk.CTkTabview(self)
        self.tabview.pack(fill="both", expand=True, padx=10, pady=10)

        self.create_main_tab()
        self.create_edit_tab()

    def create_main_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        tab_main = self.tabview.add("ü©∫ –°–æ–∑–¥–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")

        # –ö–∞—Ä—Ç–æ—á–∫–∞ Glassmorphism
        frame = ctk.CTkFrame(tab_main, corner_radius=20, fg_color="transparent")
        frame.pack(pady=20, padx=20, fill="both", expand=True)

        ctk.CTkLabel(frame, text="–ò–º—è –ø–∞—Ü–∏–µ–Ω—Ç–∞:", font=("Montserrat", 16, "bold")).pack(pady=5)
        self.entry_name = ctk.CTkEntry(frame, width=400, corner_radius=12, font=("Inter", 14))
        self.entry_name.pack(pady=5)

        ctk.CTkLabel(frame, text="–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è:", font=("Montserrat", 16, "bold")).pack(pady=5)

        self.disease_vars = {}
        self.disease_frame = ctk.CTkScrollableFrame(frame, width=400, height=200, corner_radius=12,
                                                    fg_color="transparent")
        self.disease_frame.pack(pady=5, padx=10, fill="both", expand=True)

        self.refresh_disease_checkboxes()

        self.btn_generate = ctk.CTkButton(frame, text="üìÑ –°–æ–∑–¥–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", command=self.generate_recommendations,
                                          corner_radius=15, font=("Montserrat", 14))
        self.btn_generate.pack(pady=10)

    def create_edit_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –±–æ–ª–µ–∑–Ω–µ–π"""
        tab_edit = self.tabview.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")

        frame = ctk.CTkFrame(tab_edit, corner_radius=20, fg_color="transparent")
        frame.pack(pady=20, padx=20, fill="both", expand=True)

        ctk.CTkLabel(frame, text="–ù–∞–∑–≤–∞–Ω–∏–µ –±–æ–ª–µ–∑–Ω–∏:", font=("Montserrat", 16, "bold")).pack(pady=5)
        self.entry_disease = ctk.CTkEntry(frame, width=400, corner_radius=12, font=("Inter", 14))
        self.entry_disease.pack(pady=5)

        ctk.CTkLabel(frame, text="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:", font=("Montserrat", 16, "bold")).pack(pady=5)
        self.entry_recommendation = ctk.CTkTextbox(frame, width=400, height=100, corner_radius=12, font=("Inter", 14))
        self.entry_recommendation.pack(pady=5)

        self.btn_add = ctk.CTkButton(frame, text="‚úÖ –î–æ–±–∞–≤–∏—Ç—å", command=self.add_recommendation, corner_radius=15,
                                     font=("Montserrat", 14))
        self.btn_add.pack(pady=10)

    def refresh_disease_checkboxes(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π"""
        for widget in self.disease_frame.winfo_children():
            widget.destroy()

        recommendations = load_recommendations()
        self.disease_vars = {}

        for disease in recommendations.keys():
            var = ctk.BooleanVar()
            chk = ctk.CTkCheckBox(self.disease_frame, text=disease, variable=var, font=("Inter", 14))
            chk.pack(anchor="w", padx=10, pady=2)
            self.disease_vars[disease] = var

    def generate_recommendations(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        name = self.entry_name.get().strip()
        if not name:
            CTkMessagebox(title="–û—à–∏–±–∫–∞", message="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∞—Ü–∏–µ–Ω—Ç–∞!", icon="cancel")
            return

        selected_diseases = [d for d, var in self.disease_vars.items() if var.get()]
        if not selected_diseases:
            CTkMessagebox(title="–û—à–∏–±–∫–∞", message="–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ!", icon="warning")
            return

        file_path = self.logic.generate_recommendations(name, selected_diseases)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        CTkMessagebox(title="–ì–æ—Ç–æ–≤–æ", message=f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n{file_path}", icon="info")

    def add_recommendation(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –±–æ–ª–µ–∑–Ω—å –≤ JSON –∏ –≤—ã–≤–æ–¥–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        disease = self.entry_disease.get().strip()
        recommendation = self.entry_recommendation.get("1.0", "end").strip()
        if not disease or not recommendation:
            CTkMessagebox(title="–û—à–∏–±–∫–∞", message="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–æ–ª–µ–∑–Ω–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é!", icon="cancel")
            return

        self.logic.add_recommendation(disease, recommendation)
        self.refresh_disease_checkboxes()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        CTkMessagebox(title="–ì–æ—Ç–æ–≤–æ", message=f'–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–ª—è "{disease}" –¥–æ–±–∞–≤–ª–µ–Ω–∞!', icon="check")

        # –û—á–∏—â–∞–µ–º –ø–æ–ª—è
        self.entry_disease.delete(0, "end")
        self.entry_recommendation.delete("1.0", "end")
